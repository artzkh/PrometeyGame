import random
import math
from random import choice

from vkbottle.bot import Message, Blueprint
from vkbottle.modules import json

from config import GROUP_ID, db
from functions import work_update_cleaner
from settings.cannot_change import cleaner_trash
from states import States

import keyboards

bp = Blueprint("works")


@bp.on.private_message(state=States.ACTIVE, payload_map={"work": str})
async def work(message: Message):
    payload = json.loads(message.payload)['work']
    if 'cleaner' in payload:
        if payload == 'cleaner':
            await message.answer('üßπ –†–∞–±–æ—Ç–∞ –¥–≤–æ—Ä–Ω–∏–∫–æ–º'
                                 '\n-----------------------------------------'
                                 '\n‚ûï –û–≥–æ–Ω—ë—á–∫–∏: 1-15üî•'
                                 '\n‚ûï –û–ø—ã—Ç: 1‚ú®'
                                 '\n‚ûñ –≠–Ω–µ—Ä–≥–∏—è: 5-10‚ö°', keyboard=keyboards.cleaner_menu)
        elif payload == 'cleaner:start':
            energy = await db.get_user_energy(message.peer_id)
            if energy <= 9:
                await message.answer('üö´ –¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏!'
                                     '\n-----------------------------------------'
                                     f'\n–£ —Ç–µ–±—è: {math.ceil(energy)}‚ö°'
                                     '\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 10‚ö°')
            else:
                await message.answer('üßπ –ü—Ä–∏–Ω–∏–º–∞–π—Å—è –∑–∞ —Ä–∞–±–æ—Ç—É!'
                                     '\n---------------------------------------------------'
                                     '\n–ü–æ–¥–º–µ—Ç–∞–π –≤ –Ω—É–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö, '
                                     '–Ω–∞–∂–∏–º–∞—è –Ω–∞ –∑–µ–ª—ë–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.',
                                     keyboard=choice(keyboards.cleaner_work),
                                     attachment='photo318378590_457302748')
        elif payload == 'cleaner:true':
            fire_balance, work_experience, energy, happiness = await db.get_fire_work_energy_happiness(message.peer_id)
            if energy <= 9:
                await message.answer('üö´ –¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏!'
                                     '\n-----------------------------------------'
                                     f'\n–£ —Ç–µ–±—è: {math.ceil(energy)}‚ö°'
                                     '\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 10‚ö°')
            else:
                text = ''
                new_fire_balance = fire_balance
                for i in range(10):
                    trash = random.choice(cleaner_trash)
                    text += trash['emoji']
                    new_fire_balance += trash['fire']
                new_energy = energy - random.randint(5, 10)
                new_work_experience = work_experience + 1
                if await work_update_cleaner(message.peer_id, energy, new_energy, happiness,
                                             new_fire_balance, new_work_experience):
                    try:
                        await bp.state_dispenser.set(message.peer_id, States.ACTIVE,
                                                     last_activity=message.state_peer.payload["last_activity"],
                                                     recommendation=
                                                     (message.state_peer.payload["recommendation"]).remove('energy'))
                    except Exception:
                        pass
                await message.answer('üßπ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'
                                     '\n---------------------------------------------------'
                                     f'\n{text}'
                                     '\n---------------------------------------------------'
                                     f'\n‚ûï –û–≥–æ–Ω—ë—á–∫–æ–≤: {new_fire_balance}üî•'
                                     f'\n‚ûï –û–ø—ã—Ç: {new_work_experience}‚ú®'
                                     f'\n‚ûñ –≠–Ω–µ—Ä–≥–∏—è: {math.ceil(new_energy)}‚ö°', keyboard=choice(keyboards.cleaner_work))
        elif payload == 'cleaner:false':
            fire_balance, work_experience, energy, happiness = await db.get_fire_work_energy_happiness(message.peer_id)
            if energy <= 9:
                await message.answer('üö´ –¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏!'
                                     '\n-----------------------------------------'
                                     f'\n–£ —Ç–µ–±—è: {math.ceil(energy)}‚ö°'
                                     '\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 10‚ö°')
            else:
                new_energy = energy - random.randint(5, 10)
                new_work_experience = work_experience + 1
                if await work_update_cleaner(message.peer_id, energy, new_energy, happiness,
                                             fire_balance, new_work_experience):
                    try:
                        await bp.state_dispenser.set(message.peer_id, States.ACTIVE,
                                                     last_activity=message.state_peer.payload["last_activity"],
                                                     recommendation=
                                                     (message.state_peer.payload["recommendation"]).remove('energy'))
                    except Exception:
                        pass
                await message.answer('üßπ –¢—ã —á–µ, –≤–æ–∑–¥—É—Ö –ø–æ–¥–º–µ—Ç–∞–µ—à—å?'
                                     '\n---------------------------------------------------'
                                     f'\nüí®üí®üí®üí®üí®üí®üí®üí®üí®üí®'
                                     '\n---------------------------------------------------'
                                     f'\n‚ûï –û–≥–æ–Ω—ë—á–∫–æ–≤: {fire_balance}üî•'
                                     f'\n‚ûï –û–ø—ã—Ç: {new_work_experience}‚ú®'
                                     f'\n‚ûñ –≠–Ω–µ—Ä–≥–∏—è: {math.ceil(new_energy)}‚ö°', keyboard=choice(keyboards.cleaner_work))
                await db.update_fire_work_energy(message.peer_id, fire_balance, new_work_experience, new_energy)
